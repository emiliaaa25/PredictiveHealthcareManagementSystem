Required:
	Java 17 JDK (`java --verison` in a command line to check)
	PostgreSQL 17 + pgAdmin4
	SonarQube Community Build (can't push this to git): https://www.sonarsource.com/products/sonarqube/downloads/

1. pgAdmin4 -> Connect to PostgreSQL 17

2. Right-Click Databases -> Create -> Database...
	Database: sonarqube_db

3. Right-Click Login/Group Roles -> Create -> Login/Group Role
	Name: sonarqube
	Definition -> Password: sonarqube
	Privileges -> Can login?: True, Create databases?: True

4. sonarqube_db -> Schemas -> Right-Click public -> Security -> +
	Grantee: sonarqube
	Privileges: ALL

5. Extract downloaded archive to PHMS.WebAPI/Tools

6. Open Tools\sonarqube-10.7.0.96327\conf\sonar.properties, uncomment & modify these lines, save:
	24: sonar.jdbc.username=sonarqube
	25: sonar.jdbc.password=sonarqube
	43: sonar.jdbc.url=jdbc:postgresql://localhost/sonarqube_db
	284: sonar.search.port=0

7. Open command line in Tools/sonarqube-10.7.0.96327/bin/windows-x86-64

8. `StartSonar.bat`: You should see `INFO  app[][o.s.a.SchedulerImpl] SonarQube is operational` at the end.

9. Go to localhost:9000

10. Login as user `admin`, password `admin`

11. Change password (to `Sonarqube01!` or sth)

12. Create Project -> Local project
	Project display name: PHMS (autofills Project Key, too)
	Main branch name: main (no idea what this means)

13. Next -> Use Global Settings (or sth like that, the first option)

14. Projects (Top bar) -> PHMS.WebAPI -> Locally
	Token name: PHMS.WebAPI.SonarQubeAnalysisToken
	Expires in: No expiration

15. Generate + Save the token somewhere (not within repo)

16. Continue:
	.NET
	.NET Core

17. Open the VS Project -> Package Console Manager:
	`dotnet tool install --global dotnet-sonarscanner`
	`dotnet tool install --global dotnet-reportgenerator-globaltool`

18. In Windows File Explorer, in PredictiveHealthcareManagementSystem\PHMS.WebAPI, create a new .txt file and rename it to:
	RunSonarQubeAnalysis.bat

19. Copy contents of `RunSonarQubeAnalysis.template.bat` into `RunSonarQubeAnalysis.bat` and replace `YOUR_TOKEN` with your token from step 15.

20. Go into Developer PowerShell (or open a new Terminal) in Visual Studio and run `.\RunSonarQubeAnalysis.bat`
If this doesn't work, try step 20'.

21. Back on SonarQube page, Overview -> Overall Code
	Coverage: Code Coverage
	Maintainability: Technical Debts

22. Ctrl+C, then `y` in the running command line to shut down SonarQube

If Ctrl+C gets stuck trying to shut down sonarqube, open Task Manager -> Details: Kill all `java.exe` processes.

To generate a new analysis after making changes to the project, simply re-do step 20.

20'. In Package Manager Console, run one by one these, with your token replaced:
dotnet sonarscanner begin /k:"PHMS.WebAPI" /d:sonar.host.url="http://localhost:9000" /d:sonar.token="YOUR_TOKEN" /d:sonar.coverageReportPaths="TestResults/SonarQubeReport/sonarqube.xml"

dotnet build

dotnet test PHMS.UnitTests --collect:"XPlat Code Coverage" --results-directory ".\TestResults\UnitTests"

Move-Item -Path (Get-ChildItem -Path ".\TestResults\UnitTests" -Recurse -Filter "coverage.cobertura.xml").FullName -Destination ".\TestResults\coverage.unit.cobertura.xml" -Force

dotnet test PHMS.IntegrationTests --collect:"XPlat Code Coverage" --results-directory ".\TestResults\IntegrationTests"

Move-Item -Path (Get-ChildItem -Path ".\TestResults\IntegrationTests" -Recurse -Filter "coverage.cobertura.xml").FullName -Destination ".\TestResults\coverage.integration.cobertura.xml" -Force

reportgenerator -reports:".\TestResults\coverage.unit.cobertura.xml;.\TestResults\coverage.integration.cobertura.xml" -targetdir:".\TestResults\SonarQubeReport" -reporttypes:"SonarQube"

dotnet sonarscanner end /d:sonar.token="YOUR_TOKEN"
